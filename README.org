#+title: Neptune
#+AUTHOR: ybenel (m1ndo)
#+HTML: <img src="imgs/neptune.png" align="right" width="400" height="400">

Neptune is a virtual application that produces a sound upon key activation, resembling a physical mechanical keyboard (Or any sound you want!).
Unlike its real-life counterpart, Neptune spares you from disturbing those nearby. It bears a striking resemblance to mechvibes, but with notable advantages: superior speed, being coded in Go instead of JavaScript and Electron, thus eliminating excessive RAM and CPU consumption.

* Supported
- [X] Linux (Works in both X11/Wayland)
- [X] Windows (Works)
- [-] MacOs (Untested)
- [-] BSD (Untested)

* Screenshot // Demo (Sound on)
#+HTML: <img src="imgs/nepscreen.png" align="left" width="400" height="400">
#+HTML: <video src="https://github.com/M1ndo/Neptune/assets/44820142/53b35d60-24be-44d1-9b96-fbbc46e27bbe"> </video>


* Installation / Buildings.
By default i provide pre-built binaries for both Linux and Windows,
I'd include MacOS as well if i had a MacOs machine to build the app, although it is possible
to cross-compile from Linux to MacOs its very troublesome and requires building a toolchain and whatnot.
** Binaries.
Both Windows And Linux binaries are for x86_64 architecture only.
More to come soon.
Headover to the [[https://github.com/M1ndo/Neptune/releases/tag/v1.0.0][Releases]] and download the appropriate build for your machine.
*** Linux
To install Neptune your Linux distribution just run .
#+begin_src bash
mkdir Neptune && tar -xf Neptune.tar.xz -C Neptune/ && cd Neptune; sudo make install
#+end_src
**** Arch Linux (AUR)
#+begin_src bash
yay -S realneptune
#+end_src 
*** Windows
*Important Notice* Windows Defender will mistakenly flag the executable as malicious.
But its not malicious because i don't own a signing certificate (This issue should disappear later)
If you get a defender smart screen just click on *Show and Run this file* .
** Building.
To build *Neptune* you'll have to satisfy few requirements.
- Golang version >1.21
- GCC or Clang compiler
- Mingw64 (Windows)
- o64-clang / Clang (MacOS)
*** With Make and fyne
#+begin_src  bash
make linux
# OR
make windows
#+end_src
*** Linux / MacOs
#+begin_src bash
CGO_ENABLED=1 CC=gcc CXX=g++ go build . # Be inside of Neptune Directory.
#+end_src
*** Windows
#+begin_src bash
GOOS=windows GOARCH=amd64 CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ go build -ldflags -H=windowsgui .
#+end_src
* Command Line / GUI
By default running Neptune will open up the *GUI interface*.
Both modes do not eat your ram and cpu however CLI mode is more efficient if you using a WM.
** CLI Options
#+begin_src bash
Usage of Neptune:
  -cli
        Run in CLI instead of GUI
  -download
        Download all other soundkeys
  -lst
        List all available sounds
  -sounddir string
        Sounds directory
  -soundkey string
        Soundkey to use default (nk-cream)
  -verbose
        Verbose output (Debugging)
  -volume float
        Set volume (0 to 1) (default 1)
#+end_src
* Keysounds.
By default =nk-cream= keysounds are embedded in the app so it doesn't require any assets.
By default when your first run the app on *GUI* mode, it will download the missing sounds and the app will restart itself.
If you going to run the app for the first time on CLI, use =-download= to download missing sounds (no need to restart)
#+begin_src bash
Neptune -cli -download
#+end_src
** Custom Sounds keys
Setting/Creating a custom keys is very simple and doesn't require to write any configurations.
Be in the following folder
- For Linux:  =~/.local/share/Neptune=
- For Windows: =%AppData%\Neptune (C:\Users\Ybenel\Local\Appdata\Roaming\Neptune)=
- For MacOs: =Library\Application Support\Neptune=
create a folder with any name you want then create a file called =config.json= (don't worry there's no configuration)
Then let's say you want to create a custom key for "key a" all you have to do is to move your custom sound file.
It should be *.wav* or *.ogg* and call it =a.wav= and that's it .
- So it would be like =alt= -> =alt.wav= or =alt.ogg=
If you're not sure about the key name read this [[https://github.com/M1ndo/Neptune/blob/main/pkg/neptune/keycode.go][file]] variable =LEcode2Char=
*** Fallback sounds.
Let say you want to create a custom sound but you don't wanna customize each key.
This is where fallback sound keys come in. all you have to do is have a sound file that will be played
for every other key that doesn't have its sound file.
The fallback file can be anywhere from (it only needs to have a keyword fallback)
And there could be multiple fallback files (all fallback files will be used randomly on each click)
#+begin_src bash
fallback.wav
fallback2.wav
fallback3.ogg
fallbackgg.wav
#+end_src
*** Key Events (up and down)
Neptune supports keyevents. so that when you click on a key it will play a sound and when u release that key it will play another sound.
To define a multi event keysound. just append the keyword *-up* to the soundfile.

Let's say you have a soundfile for key "shift", like =shift.wav= this will be played when the key is pressed.
For when its released that soundfile should be =shift-up.wav=.
- Key like =alt.wav= its release event sound file will be =alt-up.wav=
This also works for *fallback* keys, so there could =fallback.wav= =fallback-up= =fallback2.ogg= =fallback2-up.ogg= and so on.
However there one thing you add to let Neptune know that this soundkey supports multi events.
Edit config.json in soundkey directory you created and add this (name is optional).
#+begin_src json
{
  "name": "blabla",
  "support-events": true
}
#+end_src

* Donate.
If you wanna consider supporting this project by donating, please spare some cash [[https://ybenel.cf/DonateToNeptune][Here]]
* Author
Written by [[https://github.com/m1ndo][ybenel]]
* License
AGPLv3
#  LocalWords:  Golang
